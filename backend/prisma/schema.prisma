generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String   @unique
  password String
  name     String
}

model SubscriptionPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  duration    Int      // in days (e.g. 90, 180)
  price       Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDefault   Boolean  @default(false)
  agents      Agent[]  @relation("AgentSubscription")
  agentSubscriptions AgentSubscription[]
}

model AgentSubscription {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  agentId      String           @db.ObjectId
  planId       String           @db.ObjectId
  status       String           // pending | confirmed | rejected
  requestedAt  DateTime         @default(now())
  confirmedAt  DateTime?
  expiresAt    DateTime?
  paymentRef   String?          // UPI reference or txn id
  isActive     Boolean          @default(false)
  agent        Agent            @relation(fields: [agentId], references: [id])
  plan         SubscriptionPlan @relation(fields: [planId], references: [id])
}

model Agent {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  email               String             @unique
  password            String?  
  image               String?
  phone               String             @unique
  referralIds         String[]
  leadExpiryDays      Float              @default(90)
  totalEarnings       Float              @default(0)            // total revenue from all converted leads
  monthlyEarnings     Json               @default("{}")  
  subscriptionStatus  SubscriptionStatus @default(ACTIVE)
  subscriptionStart   DateTime           @default(now())
  subscriptionEnd     DateTime
  subscriptionPlanId  String             @db.ObjectId
  subscriptionPlan    SubscriptionPlan   @relation("AgentSubscription", fields: [subscriptionPlanId], references: [id])
  agentSubscriptions  AgentSubscription[]
  leads               Lead[]
}

model Lead {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name                String
  residenceAdd        String
  contactNo           String
  email               String?
  requirement         Requirement
  budget              String
  howHeard            HowHeard
  referredById        String?            @db.ObjectId
  referredBy          Agent?             @relation(fields: [referredById], references: [id])
  agentId             String             @db.ObjectId                     // Foreign key to Agent
  projectDetail       String?
  location            String?
  status              LeadStatus         @default(PENDING)
  convertedAt         DateTime?  
  rejectedAt          DateTime?
  visits              Visit[] 
  expectedRevenue     Float?  
  createdAt           DateTime
}

model Visit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  lead        Lead     @relation(fields: [leadId], references: [id])
  leadId      String   @db.ObjectId
  description String?
  images      String[] // Array of image URLs
  createdAt   DateTime @default(now())
}

enum Requirement {
  R_1RK @map("1RK")
  R_1BHK @map("1BHK")
  R_2BHK @map("2BHK")
  R_3BHK @map("3BHK")
  R_4BHK @map("4BHK")
  SHOP
}


enum HowHeard {
  HORDING
  FRIENDS
  STANDEY
  OTHER_SOURCES
}

enum LeadStatus {
  PENDING
  CONVERTED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  TRIAL
  INACTIVE
}

// History / Archive Collection
model LeadHistory {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  originalLeadId String  @db.ObjectId
  name           String
  residenceAdd   String
  contactNo      String
  email          String
  requirement    Requirement
  budget         String
  howHeard       HowHeard
  referredBy     String?
  projectDetail  String?
  location       String?
  createdAt      DateTime
  archivedAt     DateTime @default(now())
}